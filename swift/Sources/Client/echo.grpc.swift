//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: echo.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


///
/// This is a simple RPC service. It's like an interface declaration in the Protobuf language. In my opinion, it's more
/// useful to think of this as an interface and not a service.
///
/// Usage: instantiate `EchoClient`, then call methods of this protocol to make API calls.
public protocol EchoClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: EchoClientInterceptorFactoryProtocol? { get }

  func echo(
    _ request: Message,
    callOptions: CallOptions?
  ) -> UnaryCall<Message, Message>
}

extension EchoClientProtocol {
  public var serviceName: String {
    return "Echo"
  }

  ///
  /// This is a simple RPC method that echos back some message. Well, it's not really a method but rather the interface
  /// of a method. It's up to the implementing server-side code to actually implement the echo functionality. There's
  /// nothing stopping the server-side implementation from just returning a random string or an empty string instead of
  /// actually echoing back the same string.
  ///
  /// - Parameters:
  ///   - request: Request to send to Echo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func echo(
    _ request: Message,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Message, Message> {
    return self.makeUnaryCall(
      path: EchoClientMetadata.Methods.echo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEchoInterceptors() ?? []
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension EchoClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "EchoNIOClient")
public final class EchoClient: EchoClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: EchoClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: EchoClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the Echo service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: EchoClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct EchoNIOClient: EchoClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: EchoClientInterceptorFactoryProtocol?

  /// Creates a client for the Echo service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: EchoClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
///
/// This is a simple RPC service. It's like an interface declaration in the Protobuf language. In my opinion, it's more
/// useful to think of this as an interface and not a service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol EchoAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: EchoClientInterceptorFactoryProtocol? { get }

  func makeEchoCall(
    _ request: Message,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Message, Message>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension EchoAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return EchoClientMetadata.serviceDescriptor
  }

  public var interceptors: EchoClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeEchoCall(
    _ request: Message,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Message, Message> {
    return self.makeAsyncUnaryCall(
      path: EchoClientMetadata.Methods.echo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEchoInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension EchoAsyncClientProtocol {
  public func echo(
    _ request: Message,
    callOptions: CallOptions? = nil
  ) async throws -> Message {
    return try await self.performAsyncUnaryCall(
      path: EchoClientMetadata.Methods.echo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEchoInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct EchoAsyncClient: EchoAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: EchoClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: EchoClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

public protocol EchoClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'echo'.
  func makeEchoInterceptors() -> [ClientInterceptor<Message, Message>]
}

public enum EchoClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Echo",
    fullName: "Echo",
    methods: [
      EchoClientMetadata.Methods.echo,
    ]
  )

  public enum Methods {
    public static let echo = GRPCMethodDescriptor(
      name: "Echo",
      path: "/Echo/Echo",
      type: GRPCCallType.unary
    )
  }
}

